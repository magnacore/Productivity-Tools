import os
myhome = os.path.expanduser('~')

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
import sys as _sys
from types import ModuleType as _ModuleType
_mod = _ModuleType("xontrib.conda",
                   f"Autogenerated from $({myhome}/anaconda3/bin/conda shell.xonsh hook)")
__xonsh__.execer.exec($(f"{myhome}/anaconda3/bin/conda" "shell.xonsh" "hook"),
                      glbs=_mod.__dict__,
                      filename=f"$({myhome}/anaconda3/bin/conda shell.xonsh hook)")
_sys.modules["xontrib.conda"] = _mod
del _sys, _mod, _ModuleType
# <<< conda initialize <<<

# =================================== settings =================================
$AUTO_CD = True
#$VI_MODE = True
$PROMPT = '🐚{env_name}{BOLD_GREEN}{user}@{hostname}{BOLD_BLUE} {cwd}{branch_color}{curr_branch: {}}{RESET} {BOLD_BLUE}{prompt_end}{RESET} '
execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')
# =================================== exports =================================

$VISUAL='/usr/bin/nvim'
$EDITOR=$VISUAL

# =================================== aliases =================================
# We can also source aliases from bash : source-bash .bash_aliases if we want to use the same aliases between xonsh and bash

aliases ["sdb-eject"] = "udisksctl power-off -b /dev/sdb"
aliases ["hugo-start"] = "hugo server --disableFastRender"
aliases ["g"] = "git"

# =================================== paths =================================
# We can also source paths from bash : source-bash .profile if we want to use the same paths between xonsh and bash
# only add paths that aren't already in PATH
# use reverse since we're prepending

for p in reversed([
        $HOME + "/Bin",
        $HOME + "/anaconda3/envs/xonsh/bin/",
        $HOME + "/anaconda3/envs/util/bin/",
        $HOME + "/.local/bin",
]):
    if p not in $PATH:
        $PATH.insert(0, p)
