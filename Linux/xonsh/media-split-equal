#!/home/manuj/anaconda3/envs/xonsh/bin/xonsh
cyan = '\x1b[1;36m'
no_color = '\x1b[0m'

import os
import glob
import sys
import datetime
from tqdm import tqdm
import mimetypes

mimetypes.init()

if len(sys.argv) == 1:
	split_duration = '300'
	threshold_seconds = '600'
elif len(sys.argv) == 2:
	split_duration = sys.argv[1]
	threshold_seconds = '600'
else:
	split_duration = sys.argv[1]
	threshold_seconds = sys.argv[2]

def get_mime(file):
	mimestart = mimetypes.guess_type(file)[0]

	if mimestart != None:
		mimestart = mimestart.split('/')[0]
		return mimestart
	else:
		return None

allMediaFiles = glob.glob("*.*")
allMediaFiles.sort()

to_split = False

print(f"{cyan}Looking for media longer than threshold of {int(threshold_seconds)//60} minutes...{no_color}")

for media in allMediaFiles:

	mimestart = get_mime(media)

	if mimestart != None:
		
		if mimestart in ['audio', 'video']:

			duration = $(ffprobe -v quiet -of csv=p=0 -show_entries format=duration @(media))
			duration = float(duration)
			
			if duration > float(threshold_seconds):
				print(f"{cyan}Media longer than threshold of {datetime.timedelta(seconds = round(duration,0))} found. Will split...{no_color}")
				to_split = True
				break

if to_split == True:
	
	for media in tqdm(allMediaFiles):

		mimestart = get_mime(media)

		if mimestart != None:
			
			if mimestart in ['audio', 'video']:

				duration = $(ffprobe -v quiet -of csv=p=0 -show_entries format=duration @(media))
				
				duration = float(duration)
				split_duration = float(split_duration)
				
				parts=int(duration//split_duration)

				root_ext = os.path.splitext(media)
				extension = root_ext[1]

				if mimestart == 'audio':
					extension = ".mka"
				elif mimestart == 'video':
					extension = ".mkv"
				
				if (parts != 0):
					remaining = duration%split_duration
					excess = round(remaining/parts,0)
					split_duration_individual = int(split_duration + excess)

					#print(f"{cyan}Splitting for {split_duration_individual} seconds...{no_color}")

					new_filename = root_ext[0] + f'_SPLIT_EQUAL' + extension
					mkvmerge -q -o SPLIT/@(new_filename) @(media) --split duration:@(str(split_duration_individual)+'s')
				else:
					new_filename = root_ext[0] + f'_SPLIT_EQUAL' + extension
					mkvmerge -q -o SPLIT/@(new_filename) @(media) --split duration:@(str(split_duration)+'s')

else:
	print(f"{cyan}Nothing to split...exiting.{no_color}")
	
