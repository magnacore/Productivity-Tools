#!/usr/bin/env xonsh

import datetime
import math
import argparse
import os
import sys
import fnmatch
from rich.console import Console
from rich.progress import track
from rich import print

sys.path.append(os.path.expanduser('~/Bin'))

from utilities import (
    get_mime,
    get_duration,
    get_filename_extension,
    set_valid_file_names,
    get_user_selection
)

console = Console()    

def run_percentage_tag(file_name):
    # Get a list of all files in the current directory
    all_files = os.listdir('.')
    
    # Filter the list to only include files starting with the input string
    matching_files = [file for file in all_files if fnmatch.fnmatch(file, f"{file_name}*")]
    
    # of a list as arguments to a xonsh script
	# We are therefore calling a xonsh script from another xonsh script (which is this file)
    file-tag-percentage @(matching_files)

def parse_args():
    parser = argparse.ArgumentParser(description="Split media files")
    parser.add_argument('-s', '--split_duration', type=int, required=True, help="Duration in seconds to split the media")
    parser.add_argument('-t', '--threshold_seconds', type=int, required=True, help="Threshold in seconds beyond which the media should be split")
    parser.add_argument('-e', '--equal', action='store_true', help="Create approximately equal parts")
    parser.add_argument('files', nargs='+', help="Files to process")
    return parser.parse_args()

def process_files(args):
    allFiles = args.files
    allFiles.sort()
    split_duration = args.split_duration
    threshold_seconds = args.threshold_seconds
    clean_file_names = set_valid_file_names(allFiles)
    to_split = False

    console.rule(f"[bold cyan]Splitting media...", style="cyan")
    console.print(f"[bold cyan]Looking for media longer than threshold of {int(threshold_seconds)//60} minutes...")

    for file in clean_file_names:
        mimestart = get_mime(file)
        if mimestart in ['audio', 'video'] and get_duration(file) > int(threshold_seconds):
            console.print(f"[bold green]Media of length {datetime.timedelta(seconds = round(get_duration(file),0))} found. Will split...")
            to_split = True
            break

    if to_split:
        handle_splitting(clean_file_names, split_duration, args.equal)
    else:
        console.print(f"[green]Nothing to split...exiting.")
        audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Error.ogg &

def handle_splitting(clean_file_names, split_duration, equal):
    delete_choice = get_user_selection(["No", "Yes"])
    
    for file in track(clean_file_names, description="[bold cyan]Splitting : [/bold cyan]"):
        mimestart = get_mime(file)
        
        if mimestart in ['audio', 'video']:
            filename, extension = get_filename_extension(file)
            new_filename = filename + f'-part' + (".mka" if (mimestart == 'audio' or extension == ".mka") else ".mkv")

            split_file(file, new_filename, split_duration, equal)
            handle_original_file(file, delete_choice)
            run_percentage_tag(filename)
        else:
            print(f"[yellow]Skipping {file}")
    audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Success.ogg &

def split_file(file, new_filename, split_duration, equal):
    duration = get_duration(file)
    parts=int(duration//split_duration)

    if (parts != 0):
        remaining = duration%split_duration
        excess = math.ceil(remaining/parts)
        
        if equal:
            split_duration_with_excess = int(split_duration + excess)
            
            mkvmerge -q -o @(new_filename) @(file) --split duration:@(str(split_duration_with_excess)+'s')
        else:
            if excess < 30:
                split_duration_with_excess = int(split_duration + excess)
            else:
                split_duration_with_excess = int(split_duration)
            mkvmerge -q -o @(new_filename) @(file) --split duration:@(str(split_duration_with_excess)+'s')
    
    else:
        ## This path is used when the media's duration is less than split duration
        mkvmerge -q -o @(new_filename) @(file) --split duration:@(str(split_duration)+'s')


def handle_original_file(file, delete_choice):
    if delete_choice == "Yes":
        trash-put @(file)
    else:
        mkdir -p ./Original_Media
        mv @(file) ./Original_Media/

def main():
    args = parse_args()

    if args.files:
        process_files(args)
    
    console.rule(style="cyan")

if __name__ == "__main__":
    main()
