#!/usr/bin/env xonsh
import datetime
import math

from rich.console import Console
from rich.progress import track
from rich import print

console = Console()

import sys
import os
myhome = os.path.expanduser('~')
sys.path.append(f"{myhome}/Bin")

from utilities import get_mime, get_duration, get_filename_extension, set_valid_file_names, get_user_selection

import fnmatch

def percentage_tag(file_name):
	# Get a list of all files in the current directory
	all_files = os.listdir('.')

	# Filter the list to only include files starting with the input string
	matching_files = [file for file in all_files if fnmatch.fnmatch(file, f"{file_name}*")]
    
	# file-tag-percentage is a xonsh script. matching_files is a list. We are passing the elements
	# of a list as arguments to a xonsh script
	# We are therefore calling a xonsh script from another xonsh script (which is this file)
	file-tag-percentage @(matching_files)


# sys.argv[0] is the name of the script which will always be there
selection = False

if len(sys.argv) > 3:
	selection = True

if selection:
	allFiles = sys.argv[3:]
	allFiles.sort()

	split_duration = sys.argv[1]
	threshold_seconds = sys.argv[2]

	clean_file_names = set_valid_file_names(allFiles)

	to_split = False

	console.rule(f"[bold cyan]Splitting media...", style="cyan")
	console.print(f"[bold cyan]Looking for media longer than threshold of {int(threshold_seconds)//60} minutes...")

	delete_original = ["No", "Yes"]

	for file in clean_file_names:
		mimestart = get_mime(file)

		if mimestart != None:
			if mimestart in ['audio', 'video']:

				duration = get_duration(file)

				if duration > float(threshold_seconds):
					console.print(f"[bold green]Media of length {datetime.timedelta(seconds = round(duration,0))} found. Will split...")
					to_split = True					
					break

	if to_split == True:
		console.print(f"[bold cyan]Delete Original Media?")
		delete_choice = get_user_selection(delete_original)

		for file in track(clean_file_names, description="[bold cyan]Splitting : [/bold cyan]"):

			mimestart = get_mime(file)

			if mimestart != None:

				if mimestart in ['audio', 'video']:

					duration = get_duration(file)
					split_duration = float(split_duration)

					parts=int(duration//split_duration)

					filename, extension = get_filename_extension(file)

					if (mimestart == 'audio') or (extension == ".mka"):
						extension = ".mka"
					elif mimestart == 'video':
						extension = ".mkv"

					new_filename = filename + f'-part' + extension

					if (parts != 0):
						remaining = duration%split_duration
						excess = math.ceil(remaining/parts)
						split_duration_with_excess = int(split_duration + excess)
						
						mkvmerge -q -o @(new_filename) @(file) --split duration:@(str(split_duration_with_excess)+'s')
					else:
						mkvmerge -q -o @(new_filename) @(file) --split duration:@(str(split_duration)+'s')

					if delete_choice == "Yes":
						trash-put @(file)
					else:
						mkdir -p ./Original_Media
						mv @(file) ./Original_Media/
				
					percentage_tag(filename)

				else:
					print(f"[yellow]Skipping {file}")

		audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Success.ogg &

	else:
		console.print(f"[green]Nothing to split...exiting.")
		audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Error.ogg &

console.rule(style="cyan")
