#!/usr/bin/env xonsh

import sys
import os
import argparse
from rich.progress import track
from rich.console import Console
from rich import print

myhome = os.path.expanduser('~')
sys.path.append(f"{myhome}/Bin")

from utilities import get_mime, get_filename_extension

console = Console()

def parse_args():
	parser = argparse.ArgumentParser(description="Convert epub")

	parser.add_argument('-w', '--width', type=int, required=False,
						help="Width of the PDF")
	parser.add_argument('-l', '--length', type=int, required=False,
						help="Height of the PDF")
	parser.add_argument('-f', '--font_size', type=int, required=False,
						help="Font size of the PDF")
	parser.add_argument('-m', '--margin', type=int, default=10, required=False,
						help="Margin of the PDF")
	parser.add_argument('files', nargs='+', 
					 	help="Epubs to process")
	parser.add_argument('-o', '--output_format', choices=['pdf', 'txt'], required=True,
						help="Output format (pdf or txt)")

	parser.set_defaults(width=946, length=968, font_size=32, margin=10, output_format="pdf")

	return parser.parse_args()

def process_files(args):
	files = args.files
	output_format = args.output_format
	width=args.width
	length=args.length
	dimension = f"{width}x{length}"
	font_size = args.font_size
	margin = args.margin

	for file in track(files, description="[bold cyan]Convert : [/bold cyan]"):
		mimestart = get_mime(file, part=1)
		if mimestart != None:
			if mimestart in ['epub', 'epub+zip']:
				output_filename, _ = get_filename_extension(file)
				output_filename = output_filename + f'.{output_format}'

				if output_format == "txt":					
					if !(ebook-convert @(file) @(output_filename)):
						print(f"[green]Converted {file}")
					else:
						print(f"[bold red]Could not convert {file}")
				elif output_format == "pdf":
					# https://manual.calibre-ebook.com/generated/en/ebook-convert.html#pdf-output-options
					# if custom-size is specified paper-size will be ignored
					if !(ebook-convert @(file) @(output_filename) \
						--custom-size @(dimension) \
						--unit point \
						--pdf-default-font-size @(font_size) \
						--paper-size a4 \
						--preserve-cover-aspect-ratio \
						--pretty-print \
						--pdf-page-margin-bottom @(margin) \
						--pdf-page-margin-top @(margin) \
						--pdf-page-margin-left @(margin) \
						--pdf-page-margin-right @(margin)):
						print(f"[green]Converted {file}")
					else:
						print(f"[bold red]Could not convert {file}")

def main():
	try:
		args = parse_args()
	except argparse.ArgumentError as err:
		audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Error.ogg &
		print(f"Error: {err}")
		parser.print_help()
		sys.exit(1)    
    
	process_files(args)
	audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Success.ogg &
	console.rule(style="cyan")

if __name__ == "__main__":
	main()
 