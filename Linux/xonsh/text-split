#!/usr/bin/env xonsh

import os
import re
import sys
import unidecode

from rich.console import Console
from rich.progress import track

myhome = os.path.expanduser('~')
sys.path.append(f"{myhome}/Bin")

from utilities import (get_mime, 
                       get_filename_extension, 
                       get_user_selection,
                       handle_original_file)

console = Console()

split_choice = ['Google TTS API', '10k', '18k', 'Custom']


def process_files(allFiles, split_after_kb, delete_choice):
    allFiles.sort()
    console.rule(f"[bold cyan]Splitting Text to {split_after_kb} kbs each...")

    for fname in track(allFiles, description="[bold cyan]Splitting : [/bold cyan]"):
        mimestart = get_mime(fname)
        if mimestart and mimestart in ['text']:
            split_text_file(fname, split_after_kb)
        handle_original_file(fname, delete_choice, "Texts")


def split_text_file(fname, split_after_kb):
    file_contents = open(fname, "r").read()
    file_contents = unidecode.unidecode(file_contents)

    file_name, _ = get_filename_extension(fname)

    part = 1
    buffer = ""
    sent_text = re.split('(?<=[.!?]) +', file_contents)

    for sentence in sent_text:
        buffer += sentence + " "
        if is_buffer_size_exceeded(buffer, split_after_kb, sentence, sent_text):
            write_buffer_to_file(buffer, file_name, part)
            buffer = ""
            part += 1


def is_buffer_size_exceeded(buffer, split_after_kb, sentence, sent_text):
    buffer_size_kb = sys.getsizeof(buffer) / 1024.0
    return (buffer_size_kb > split_after_kb) or (sentence == sent_text[-1])


def write_buffer_to_file(buffer, file_name, part):
    new_filename = file_name + "-" + str(part).zfill(4) + ".txt"
    with open(new_filename, 'w') as output_file:
        output_file.write(buffer)


def main():
    if len(sys.argv) < 3:
        console.print(f"[bold red]No file selected...exiting.")
        audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Error.ogg &
        console.rule(style="cyan")
        return

    split_after_kb = int(sys.argv[1])
    allFiles = sys.argv[2:]

    choice = get_user_selection(split_choice, "Each part will contain how many kilobytes?")
    delete_choice = get_user_selection(["No", "Yes"], "Delete original text files after splitting?")

    split_after_kb = parse_split_after_kb_choice(choice, split_after_kb)

    process_files(allFiles, split_after_kb, delete_choice)
    
    audio-play ~/Bin/oxygen-sound-theme/Oxygen-K3B-Finish-Success.ogg &
    console.rule(style="cyan")


def parse_split_after_kb_choice(choice, split_after_kb):
    if choice == '10k':
        return 10
    elif choice == '18k':
        return 18
    elif choice == 'Google TTS API':
        return 4.5
    elif choice == 'Custom':
        split_after_kb = float(input("Each part will contain how many kilobytes? "))
        if split_after_kb < 1:
            return 10
    return split_after_kb


if __name__ == "__main__":
    main()
